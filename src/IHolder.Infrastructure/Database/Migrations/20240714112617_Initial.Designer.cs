// <auto-generated />
using System;
using System.Collections.Generic;
using IHolder.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace IHolder.Infrastructure.Database.Migrations
{
    [DbContext(typeof(IHolderDbContext))]
    [Migration("20240714112617_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("IHolder.Domain.Allocations.AllocationByAsset", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AssetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("DATETIME");

                    b.Property<byte>("Recommendation")
                        .HasColumnType("TINYINT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("DATETIME");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.ComplexProperty<Dictionary<string, object>>("AllocationValues", "IHolder.Domain.Allocations.AllocationByAsset.AllocationValues#AllocationValues", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<decimal>("AmountDifference")
                                .HasColumnType("DECIMAL(18,4)")
                                .HasColumnName("AmountDifference");

                            b1.Property<decimal>("CurrentAmount")
                                .HasColumnType("DECIMAL(18,4)")
                                .HasColumnName("CurrentAmount");

                            b1.Property<decimal>("CurrentPercentage")
                                .HasColumnType("DECIMAL(18,4)")
                                .HasColumnName("CurrentPercentage");

                            b1.Property<decimal>("PercentageDifference")
                                .HasColumnType("DECIMAL(18,4)")
                                .HasColumnName("PercentageDifference");

                            b1.Property<decimal>("TargetPercentage")
                                .HasColumnType("DECIMAL(18,4)")
                                .HasColumnName("TargetPercentage");
                        });

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.HasIndex("UserId");

                    b.ToTable("AllocationByAsset", (string)null);
                });

            modelBuilder.Entity("IHolder.Domain.Allocations.AllocationByCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("DATETIME");

                    b.Property<byte>("Recommendation")
                        .HasColumnType("TINYINT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("DATETIME");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.ComplexProperty<Dictionary<string, object>>("AllocationValues", "IHolder.Domain.Allocations.AllocationByCategory.AllocationValues#AllocationValues", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<decimal>("AmountDifference")
                                .HasColumnType("DECIMAL(18,4)")
                                .HasColumnName("AmountDifference");

                            b1.Property<decimal>("CurrentAmount")
                                .HasColumnType("DECIMAL(18,4)")
                                .HasColumnName("CurrentAmount");

                            b1.Property<decimal>("CurrentPercentage")
                                .HasColumnType("DECIMAL(18,4)")
                                .HasColumnName("CurrentPercentage");

                            b1.Property<decimal>("PercentageDifference")
                                .HasColumnType("DECIMAL(18,4)")
                                .HasColumnName("PercentageDifference");

                            b1.Property<decimal>("TargetPercentage")
                                .HasColumnType("DECIMAL(18,4)")
                                .HasColumnName("TargetPercentage");
                        });

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("AllocationByCategory", (string)null);
                });

            modelBuilder.Entity("IHolder.Domain.Allocations.AllocationByProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("DATETIME");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("Recommendation")
                        .HasColumnType("TINYINT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("DATETIME");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.ComplexProperty<Dictionary<string, object>>("AllocationValues", "IHolder.Domain.Allocations.AllocationByProduct.AllocationValues#AllocationValues", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<decimal>("AmountDifference")
                                .HasColumnType("DECIMAL(18,4)")
                                .HasColumnName("AmountDifference");

                            b1.Property<decimal>("CurrentAmount")
                                .HasColumnType("DECIMAL(18,4)")
                                .HasColumnName("CurrentAmount");

                            b1.Property<decimal>("CurrentPercentage")
                                .HasColumnType("DECIMAL(18,4)")
                                .HasColumnName("CurrentPercentage");

                            b1.Property<decimal>("PercentageDifference")
                                .HasColumnType("DECIMAL(18,4)")
                                .HasColumnName("PercentageDifference");

                            b1.Property<decimal>("TargetPercentage")
                                .HasColumnType("DECIMAL(18,4)")
                                .HasColumnName("TargetPercentage");
                        });

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("AllocationsByProduct");
                });

            modelBuilder.Entity("IHolder.Domain.Assets.Asset", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("DATETIME");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("VARCHAR(80)");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("VARCHAR(600)");

                    b.Property<decimal>("Price")
                        .HasColumnType("DECIMAL(18,4)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("State")
                        .HasColumnType("TINYINT");

                    b.Property<DateTime>("StateSetAt")
                        .HasColumnType("DATETIME");

                    b.Property<string>("Ticker")
                        .IsRequired()
                        .HasColumnType("VARCHAR(80)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("DATETIME");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Asset", (string)null);
                });

            modelBuilder.Entity("IHolder.Domain.Assets.AssetInPortfolio", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AssetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("AveragePrice")
                        .HasColumnType("DECIMAL(18,4)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("DATETIME");

                    b.Property<DateTime>("FirstInvestmentDate")
                        .HasColumnType("DATETIME");

                    b.Property<decimal>("InvestedAmount")
                        .HasColumnType("DECIMAL(18,4)");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("DECIMAL(18,4)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("DATETIME");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.HasIndex("UserId");

                    b.ToTable("AssetInPortfolio", (string)null);
                });

            modelBuilder.Entity("IHolder.Domain.Categories.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("DATETIME");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("VARCHAR(80)");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("VARCHAR(600)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("DATETIME");

                    b.HasKey("Id");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("IHolder.Domain.Products.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("DATETIME");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("VARCHAR(80)");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("VARCHAR(600)");

                    b.Property<byte>("Risk")
                        .HasColumnType("TINYINT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("DATETIME");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Product", (string)null);
                });

            modelBuilder.Entity("IHolder.Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("DATETIME");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("VARCHAR(80)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("VARCHAR(80)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("VARCHAR(80)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("DATETIME");

                    b.Property<string>("_passwordHash")
                        .IsRequired()
                        .HasColumnType("VARCHAR(1200)")
                        .HasColumnName("PasswordHash");

                    b.HasKey("Id");

                    b.HasAlternateKey("Email");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("IHolder.Domain.Allocations.AllocationByAsset", b =>
                {
                    b.HasOne("IHolder.Domain.Assets.Asset", "Asset")
                        .WithMany()
                        .HasForeignKey("AssetId")
                        .IsRequired();

                    b.HasOne("IHolder.Domain.Users.User", "User")
                        .WithMany("AllocationsByAsset")
                        .HasForeignKey("UserId")
                        .IsRequired();

                    b.Navigation("Asset");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IHolder.Domain.Allocations.AllocationByCategory", b =>
                {
                    b.HasOne("IHolder.Domain.Categories.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .IsRequired();

                    b.HasOne("IHolder.Domain.Users.User", "User")
                        .WithMany("AllocationsByCategory")
                        .HasForeignKey("UserId")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("IHolder.Domain.Allocations.AllocationByProduct", b =>
                {
                    b.HasOne("IHolder.Domain.Products.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .IsRequired();

                    b.HasOne("IHolder.Domain.Users.User", "User")
                        .WithMany("AllocationsByProduct")
                        .HasForeignKey("UserId")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("IHolder.Domain.Assets.Asset", b =>
                {
                    b.HasOne("IHolder.Domain.Products.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("IHolder.Domain.Assets.AssetInPortfolio", b =>
                {
                    b.HasOne("IHolder.Domain.Assets.Asset", "Asset")
                        .WithMany()
                        .HasForeignKey("AssetId")
                        .IsRequired();

                    b.HasOne("IHolder.Domain.Users.User", "User")
                        .WithMany("AssetsInPortfolio")
                        .HasForeignKey("UserId")
                        .IsRequired();

                    b.Navigation("Asset");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IHolder.Domain.Products.Product", b =>
                {
                    b.HasOne("IHolder.Domain.Categories.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("IHolder.Domain.Users.User", b =>
                {
                    b.Navigation("AllocationsByAsset");

                    b.Navigation("AllocationsByCategory");

                    b.Navigation("AllocationsByProduct");

                    b.Navigation("AssetsInPortfolio");
                });
#pragma warning restore 612, 618
        }
    }
}
